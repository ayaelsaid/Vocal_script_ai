<!DOCTYPE html>
<html lang="ar">
<head>
  <meta charset="UTF-8" />
  <title>Vocal Script</title>
  <style>
    body {
      font-family: 'Cairo', sans-serif;
      background-color: #f7f7f7;
      direction: rtl;
      margin: 0;
      padding: 0;
    }

    .container {
      max-width: 600px;
      margin: 80px auto;
      padding: 20px;
      text-align: center;
    }

    .vocal-script {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 10px;
      font-size: 28px;
      color: #333;
      margin-bottom: 10px;
    }

    .vocal-script svg {
      width: 28px;
      height: 28px;
      fill: #007bff;
    }

    .underline {
      width: 200px;
      height: 3px;
      background-color: #007bff;
      margin: 0 auto 30px;
      border-radius: 2px;
    }

    .textarea-container {
      position: relative;
    }

    .textarea-container textarea {
      width: 100%;
      height: 150px;
      padding: 1rem;
      font-size: 16px;
      border: 2px solid #ccc;
      border-radius: 10px;
      resize: none;
      box-sizing: border-box;
      font-family: inherit;
    }

    .controls-wrapper {
      position: absolute;
      bottom: 10px;
      right: 10px;
    }

    .mic-button,
    .stop-button,
    .cancel-button {
      background-color: transparent;
      border: none;
      cursor: pointer;
    }

    .mic-button svg,
    .stop-button svg,
    .cancel-button svg {
      width: 24px;
      height: 24px;
      fill: #007bff;
    }

    .mic-button:hover svg,
    .stop-button:hover svg,
    .cancel-button:hover svg {
      fill: #0056b3;
    }

    .recording-indicator {
      width: 12px;
      height: 12px;
      background-color: red;
      border-radius: 50%;
      animation: pulse 1s infinite;
      margin-right: 8px;
    }

    @keyframes pulse {
      0% { transform: scale(1); opacity: 1; }
      50% { transform: scale(1.5); opacity: 0.6; }
      100% { transform: scale(1); opacity: 1; }
    }

    .recording-controls {
      display: none;
      align-items: center;
      gap: 8px;
    }

    #generateBtn {
      margin-top: 20px;
      padding: 10px 20px;
      font-size: 16px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      display: none;
    }

    #generateBtn:hover {
      background-color: #0056b3;
    }

    #responseContainer {
      display: none;
      margin-top: 20px;
      padding: 15px;
      background-color: #fff;
      border: 1px solid #ccc;
      border-radius: 10px;
      text-align: right;
      font-size: 16px;
      color: #333;
    }

    #responseContainer button {
      padding: 8px 14px;
      font-size: 14px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
    }

    #responseContainer button:hover {
      background-color: #0056b3;
    }

    .response-buttons {
      margin-top: 15px;
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      justify-content: center;
    }

    #audioPlayback ,
    #audioPlayback-ai{
      display: none;
      margin-top: 20px;
      width: 100%;
    }
  </style>
</head>
<body>

  <div class="container">
    <div class="vocal-script">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960">
        <path d="M80-120v-80h800v80H80Zm680-160v-560h60v560h-60Zm-600 0 210-560h100l210 560h-96l-50-144H308l-52 144h-96Zm176-224h168l-82-232h-4l-82 232Z"/>
      </svg>
      <span>Vocal Script</span>
    </div>

    <div class="underline"></div>

    <div class="textarea-container">
      <textarea placeholder="Start talking.." id="textarea"></textarea>

      <div class="controls-wrapper">
        <button class="mic-button" id="micBtn" title="start">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <path d="M12 14a3 3 0 0 0 3-3V5a3 3 0 0 0-6 0v6a3 3 0 0 0 3 3Zm5-3a5 5 0 0 1-10 0H5a7 7 0 0 0 14 0h-2Zm-5 9a7 7 0 0 0 7-7h2a9 9 0 0 1-18 0h2a7 7 0 0 0 7 7Z"/>
          </svg>
        </button>

        <div class="recording-controls" id="recordingControls">
          <button class="stop-button" id="stopBtn" title="stop">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
              <path d="M6 6h12v12H6z"/>
            </svg>
          </button>

          <button class="cancel-button" id="cancelBtn" title="cancle">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
              <path d="M18.3 5.71 12 12l6.3 6.29-1.41 1.42L12 13.41 6.71 19.71 5.3 18.29 11.59 12 5.3 5.71 6.71 4.29 12 10.59l5.29-6.3z"/>
            </svg>
          </button>

          <div class="recording-indicator" id="recordingDot"></div>
        </div>
      </div>
    </div>

    <audio id="audioPlayback" controls></audio>

    <button id="generateBtn">Generate</button>

    <div id="responseContainer">
      <div id="aiText"></div>
      <div class="response-buttons">
        <button id="downloadBtn">üì• Download</button>
        <button id="voiceBtn">üó£Ô∏è  Hear it</button>
        <audio id="audioPlayback-ai" controls type="audio/mp3"></audio>

        <button id="saveBtn">üìù Save</button>
      </div>
    </div>
  </div>

  <script>
    const micBtn = document.getElementById('micBtn');
    const stopBtn = document.getElementById('stopBtn');
    const cancelBtn = document.getElementById('cancelBtn');
    const recordingControls = document.getElementById('recordingControls');
    const generateBtn = document.getElementById('generateBtn');
    const textarea = document.getElementById('textarea');
    const responseContainer = document.getElementById('responseContainer');
    const aiText = document.getElementById('aiText');
    const audioPlayback = document.getElementById('audioPlayback');
        const audioPlaybackAi = document.getElementById('audioPlayback-ai');


    let mediaRecorder;
    let audioChunks = [];

    micBtn.addEventListener('click', async () => {
      micBtn.style.display = 'none';
      recordingControls.style.display = 'flex';

      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        mediaRecorder = new MediaRecorder(stream);

        mediaRecorder.ondataavailable = (e) => {
          audioChunks.push(e.data);
        };

        mediaRecorder.onstop = async() => {
          const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });

          const audioUrl = URL.createObjectURL(audioBlob);

          audioPlayback.src = audioUrl;
          audioPlayback.style.display = 'block';
          audioChunks = [];
                      const res = await fetch('http://localhost:5000/api/speech-to-text', {
    method: 'POST',
      headers: {
    'Content-Type': 'audio/webm' 
  },

    body: audioBlob,
  });
  const data = await res.json();
  console.log("üéß Response:", data);

  if (data?.result?.text) {
    textarea.value = data.result.text;
  }



        }
        mediaRecorder.start();
      } catch (err) {
alert("‚ùå Unable to access the microphone");
 micBtn.style.display = 'inline-block';
        recordingControls.style.display = 'none';
      }
    });

    function stopAll() {
      micBtn.style.display = 'inline-block';
      recordingControls.style.display = 'none';
    }

    stopBtn.addEventListener('click', () => {
      if (mediaRecorder && mediaRecorder.state !== "inactive") {
        mediaRecorder.stop();
      }
      stopAll();
      generateBtn.style.display = 'inline-block';
    });

    cancelBtn.addEventListener('click', () => {
      stopAll();
    });

    textarea.addEventListener('input', () => {
      if (textarea.value.trim() !== "") {
        generateBtn.style.display = 'inline-block';
      } else {
        generateBtn.style.display = 'none';
      }
    });

    generateBtn.addEventListener('click', async() => {
      const prompt = textarea.value;

    const res = await fetch('http://localhost:5000/api/generate-Script', {
    method: 'POST',
          headers: {

              "Content-Type": "application/json"
          },
      body: JSON.stringify({ prompt }),
  });
    const data = await res.json();

const aiText = document.getElementById('aiText');
aiText.innerText = data.generatedText;
responseContainer.style.display = "block"



    });

    document.getElementById('downloadBtn').addEventListener('click', () => {
      const text = aiText.textContent;
      const blob = new Blob([text], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'ai_response.txt';
      a.click();
      URL.revokeObjectURL(url);
    });

document.getElementById('voiceBtn').addEventListener('click', async () => {
  const text = document.getElementById('aiText').innerText;

  const aiResponse = await fetch('http://localhost:5000/api/text-to-speech', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ text })
  });

  const data = await aiResponse.json();

  if (data?.filePath) {
    console.log(data.filePath)
  
  audioPlaybackAi.src = `/${data.filePath}`;

    audioPlaybackAi.style.display = 'block';
  } else {
    console.error("‚õî No filePath in response");
  }
});

    document.getElementById('saveBtn').addEventListener('click', () => {
      alert("üíæ saved successfully");
    });
  </script>

</body>
</html>
